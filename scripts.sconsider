# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
import os
from stat import *
from SomeUtils import listFiles
Import('*')

reltargetdir = os.path.join('globals', packagename, 'scripts')

sources = [
    'bootScript.sh',
    'config.sh',
    'keepwds.sh',
    'pstackwrapper.sh',
    'serverfuncs.sh',
    'SoftRestart.sh',
    'startprf.sh',
    'startwda.sh',
    'startwds.sh',
    'stopwds.sh',
    'sysfuncs.sh',
    'trapsignalfuncs.sh',
]


def setRelTargetDir(env):
    env.setRelativeTargetDirectory(reltargetdir)


_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
if _sconsider_dist < pkg_resources.parse_version("0.5"):
    from SConsider import createTargets
    buildSettings = {
        packagename: {
            'targetType': 'CopyFiles',
            'copyFiles': [
                (listFiles(sources), S_IRUSR | S_IRGRP | S_IROTH | S_IXUSR),
            ],
            'appendUnique': {
                'RELTARGETDIR': os.path.join('globals', packagename, 'scripts')
            },
        },
    }

    createTargets(packagename, buildSettings)
elif _sconsider_dist >= pkg_resources.parse_version("0.5"):
    from TargetMaker import EnvBuilder
    from TargetHelpers import createCopyFilesTarget
    reltargetdir = os.path.join('globals', packagename, 'scripts')

    def setRelTargetDir(env):
        env.setRelativeTargetDirectory(reltargetdir)

    copyFiles = [
        (listFiles(sources), S_IRUSR | S_IRGRP | S_IROTH | S_IXUSR),
    ]
    copyTarget = createCopyFilesTarget(packagename,
                                       'configfiles',
                                       lambda env: env.getTargetBaseInstallDir(),
                                       copyFiles,
                                       pkg_local=[setRelTargetDir])

    EnvBuilder().depend(copyTarget).build().RegisterPackageTarget(packagename, packagename)
